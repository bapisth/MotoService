package com.urja.motoservice.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.urja.motoservice.database.CarServicePrice;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CAR_SERVICE_PRICE".
*/
public class CarServicePriceDao extends AbstractDao<CarServicePrice, Long> {

    public static final String TABLENAME = "CAR_SERVICE_PRICE";

    /**
     * Properties of entity CarServicePrice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServiceCode = new Property(1, String.class, "serviceCode", false, "SERVICE_CODE");
        public final static Property ServiceDesc = new Property(2, String.class, "serviceDesc", false, "SERVICE_DESC");
        public final static Property PriceSmall = new Property(3, String.class, "priceSmall", false, "PRICE_SMALL");
        public final static Property PriceMedium = new Property(4, String.class, "priceMedium", false, "PRICE_MEDIUM");
        public final static Property PriceLarge = new Property(5, String.class, "priceLarge", false, "PRICE_LARGE");
    };


    public CarServicePriceDao(DaoConfig config) {
        super(config);
    }
    
    public CarServicePriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAR_SERVICE_PRICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SERVICE_CODE\" TEXT," + // 1: serviceCode
                "\"SERVICE_DESC\" TEXT," + // 2: serviceDesc
                "\"PRICE_SMALL\" TEXT," + // 3: priceSmall
                "\"PRICE_MEDIUM\" TEXT," + // 4: priceMedium
                "\"PRICE_LARGE\" TEXT);"); // 5: priceLarge
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAR_SERVICE_PRICE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CarServicePrice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serviceCode = entity.getServiceCode();
        if (serviceCode != null) {
            stmt.bindString(2, serviceCode);
        }
 
        String serviceDesc = entity.getServiceDesc();
        if (serviceDesc != null) {
            stmt.bindString(3, serviceDesc);
        }
 
        String priceSmall = entity.getPriceSmall();
        if (priceSmall != null) {
            stmt.bindString(4, priceSmall);
        }
 
        String priceMedium = entity.getPriceMedium();
        if (priceMedium != null) {
            stmt.bindString(5, priceMedium);
        }
 
        String priceLarge = entity.getPriceLarge();
        if (priceLarge != null) {
            stmt.bindString(6, priceLarge);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CarServicePrice readEntity(Cursor cursor, int offset) {
        CarServicePrice entity = new CarServicePrice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serviceCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serviceDesc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // priceSmall
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // priceMedium
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // priceLarge
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CarServicePrice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServiceCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setServiceDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPriceSmall(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPriceMedium(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPriceLarge(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CarServicePrice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CarServicePrice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
